{"version":3,"sources":["NavigationBar/NavigationBar.js","PersonalPage/NurseContext.js","Login/Login.js","WebDescription/ProjectNavigation.js","PersonalPage/NurseProfile.js","TestManagement/TestPage.js","TableContent/StyledTableCell.js","TableContent/StyledTableRow.js","AppCss.js","PatientManagement/PatientListPage.js","TestManagement/TestDetails.js","TestManagement/CreateNewTest.js","TestManagement/TestListPage.js","PatientManagement/CreateNewPatient.js","PatientManagement/PatientDetails.js","Logout/Logout.js","Register/Register.js","App.js","serviceWorker.js","index.js"],"names":["withRouter","props","className","buttonClass","Button","onClick","history","push","click","Typography","variant","typoClass","name","NurseContext","React","createContext","nurseSharedId","patient","test","setNurseContext","Login","appContext","useContext","useHistory","useRouteMatch","url","path","useState","password","idError","idErrorMessage","passwordError","passwordErrorMessage","loginState","setLoginState","event","a","loginUrl","fetch","response","json","data","console","log","preventDefault","classes","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","backgroundColor","palette","secondary","main","form","width","submit","useStyles","Container","component","maxWidth","CssBaseline","Avatar","TextField","error","required","fullWidth","id","label","helperText","autoFocus","value","onChange","e","target","type","autoComplete","FormControlLabel","control","Checkbox","color","Grid","container","item","to","ProjectDescription","NurseProfile","state","loading","nurse","firstname","lastname","department","firstnameHandleChange","bind","lastnameHandleChange","passwordHandleChange","departmentHandleChange","handleOnSubmit","sharedNurseId","this","context","setState","postUpdate","method","headers","body","JSON","stringify","then","xs","sm","md","lg","disabled","Component","contextType","testPage","searchValue","handleOnChange","searchTestByPatient","createTest","showAllTest","match","keyCode","which","InputBase","placeholder","onKeyPress","StyledTableCell","withStyles","head","customizeTable","common","white","fontSize","TableCell","StyledTableRow","root","action","hover","TableRow","UseStyles","marginRight","marginLeft","button","TableTheme","createMuiTheme","height","patientList","setPatientList","nurseContext","tableTheme","fetchData","listUrl","useEffect","ThemeProvider","TableContainer","Paper","elevation","Table","TableHead","TableBody","length","map","index","key","scope","patientId","firstName","lastName","nurseId","room","deleteUrl","ok","testDetails","testId","testItemId","testResult","date","backupTest","testItemloading","testItems","nurseIdError","patientIdError","dateError","testItemIdError","testResultError","patientLoading","submitForm","nurseIdEventHandler","patientIdEventHandler","dateEventHandler","cancel","testItemIdEventHandler","testResultEventHandler","testItemResponse","testItemData","patientUrl","patientResponse","patientData","FormControl","InputLabel","Select","MenuItem","itemId","itemName","split","CreateNewTest","TestListPage","tests","setTests","effectDependency","setDependency","sharedNurseContext","listOwner","setLisOwner","searchMethod","sharedSearchMethod","getTests","lable","aria-label","updateContext","deleteItem","createNewPatient","firstNameEventHandler","lastNameEventHandler","roomEventHandler","departmentEventHandler","Details","sharedPatient","setPatient","Logout","sharedContext","Register","postSubmit","navHeader","routerMapping","logoutRouterMapping","App","setAppBarBeforeLogin","setAppBarAfterLogin","setAppBar","copyright","align","Date","getFullYear","profilePage","style","paddingLeft","Provider","AppBar","position","Toolbar","Consumer","exact","TestPage","TestDetails","CreateNewPatient","Box","mt","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.d79cfcf0.chunk.js","sourcesContent":["import React from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { Typography, Button } from \"@material-ui/core\";\n\nconst NavigationBar = (props) => {\n  function addLink() {\n    //  return props.click===\"\"?props.history.push(props.click):props.click;\n    return props.history.push(props.click);\n  }\n  return (\n    <>\n      {/* <Link to={props.to}>\n          {props.name}\n        </Link> */}\n      <span className={props.buttonClass}>\n        <Button onClick={addLink}>\n          <Typography variant=\"h6\" className={props.typoClass}>\n            {props.name}\n          </Typography>\n        </Button>\n      </span>\n    </>\n  );\n};\n\nexport default withRouter(NavigationBar);\n","import React from 'react';\n\nconst defaultVal = {nurseSharedId:\"\",\npatient:{},\ntest:{},\nsetNurseContext:()=>{}};\nexport const NurseContext = React.createContext(defaultVal);","import React, { useContext, useState } from \"react\";\nimport { NurseContext } from \"../PersonalPage/NurseContext\";\nimport { Link, useHistory,useRouteMatch } from \"react-router-dom\";\nimport {\n  Grid,\n  Container,\n  CssBaseline,\n  Avatar,\n  makeStyles,\n  Typography,\n  FormControlLabel,\n  TextField,\n  Checkbox,\n  Button,\n} from \"@material-ui/core\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\n\nexport default function Login() {\n  const appContext = useContext(NurseContext);\n  let history = useHistory();\n  let { url,path } = useRouteMatch();\n  const [loginState, setLoginState] = useState({\n    nurseSharedId: \"\",\n    password: \"\",\n    idError: false,\n    idErrorMessage:\"\",\n    passwordError: false,\n    passwordErrorMessage:\"\",\n\n  });\n  function nurseIdOnChangeHandler(e) {\n    setLoginState({ ...loginState, nurseSharedId: e.target.value,idError: false,idErrorMessage:\"\"  });\n  }\n  function passwordOnChangeHandler(e) {\n    setLoginState({ ...loginState, password: e.target.value,passwordError: false,passwordErrorMessage:\"\" });\n  }\n  async function login(event) {\n    const loginUrl = `http://localhost:8080/nurse/${loginState.nurseSharedId}`;\n    const response = await fetch(loginUrl);\n    const data = await response.json();\n    if (data != null) {\n      if (loginState.password === data.password) {\n        appContext.setNurseContext(\"nurseSharedId\", loginState.nurseSharedId);\n        console.log(\"path\",path)\n        console.log(\"url\",url)\n        history.push(`nurseprofile`);\n        // history.push(`${url}/nurseprofile`);\n      } else {\n        setLoginState({ ...loginState, passwordError: true,passwordErrorMessage:\"Password not match\" });\n      }\n    } else {\n      setLoginState({ ...loginState, idError: true,idErrorMessage:\"ID not Exist\" });\n    }\n    event.preventDefault();\n  }\n\n  const useStyles = makeStyles((theme) => ({\n    paper: {\n      marginTop: theme.spacing(3),\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n    },\n    avatar: {\n      margin: theme.spacing(1),\n      backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n      width: \"100%\", // Fix IE 11 issue.\n      //   marginTop: theme.spacing(0),\n    },\n    submit: {\n      margin: theme.spacing(3, 0, 2),\n    },\n  }));\n  const classes = useStyles();\n\n  return (\n    <>\n      <Container component=\"main\" maxWidth=\"xs\">\n        <CssBaseline />\n        <div className={classes.paper}>\n          <Avatar className={classes.avatar}>\n            <LockOutlinedIcon />\n          </Avatar>\n          <Typography component=\"h1\" variant=\"h5\">\n            Sign in\n          </Typography>\n          <form className={classes.form} >\n            <TextField\n              error={loginState.idError}\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              id=\"nurseId\"\n              label=\"Nurse ID\"\n              name=\"nurseId\"\n              helperText={loginState.idErrorMessage}\n              autoFocus\n              value={loginState.nurseSharedId}\n              onChange={nurseIdOnChangeHandler}\n            />\n            <TextField\n              error={loginState.passwordError}\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              name=\"password\"\n              label=\"Password\"\n              type=\"password\"\n              id=\"password\"\n              autoComplete=\"current-password\"\n              helperText={loginState.passwordErrorMessage}\n              value={loginState.password}\n              onChange={passwordOnChangeHandler}\n            />\n            <FormControlLabel\n              control={<Checkbox value=\"remember\" color=\"primary\" />}\n              label=\"Remember me\"\n            />\n            <Button\n              fullWidth\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.submit}\n              onClick={login}\n            >\n              Sign In\n            </Button>\n            <Grid container>\n              {/* <Grid item xs>\n                <Link href=\"#\" variant=\"body2\">\n                  Forgot password?\n                </Link>\n              </Grid> */}\n              <Grid item>\n                <Link to=\"/Register\" variant=\"body2\">\n                  {\"Don't have an account? Register\"}\n                </Link>\n              </Grid>\n            </Grid>\n          </form>\n        </div>\n      </Container>\n    </>\n  );\n}\n","import React from 'react'\n\n\nconst ProjectDescription=()=>{\n    return(\n    <>\n    <p>* This page is an individual react practice page</p>\n    <p>* It is built for helping nurse manage the tests and patients</p>\n    <p>* Nurse can find the tests and patients information after login the system</p>\n    <p>* Nurse can also create and retrieve the tests of each patient</p>\n    <p>* Database is Oracle SQL database</p>\n    </>)\n}\n\nexport default ProjectDescription;","import React from \"react\";\nimport { NurseContext } from \"./NurseContext\";\nimport { TextField, Grid, Button } from \"@material-ui/core\";\n// const NurseIdContext = React.createContext(1);\nexport default class NurseProfile extends React.Component {\n  static contextType = NurseContext;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      nurse: {\n        firstname: \"\",\n        lastname: \"\",\n        department: \"\",\n        password: \"\",\n      },\n    };\n    this.firstnameHandleChange = this.firstnameHandleChange.bind(this);\n    this.lastnameHandleChange = this.lastnameHandleChange.bind(this);\n    this.passwordHandleChange = this.passwordHandleChange.bind(this);\n    this.departmentHandleChange = this.departmentHandleChange.bind(this);\n    this.handleOnSubmit = this.handleOnSubmit.bind(this);\n  }\n  //fetch data\n  async componentDidMount() {\n    const sharedNurseId = this.context.nurseSharedId;\n    const url = `http://localhost:8080/nurse/${sharedNurseId}`;\n\n    console.log(\"context\",this.context);\n    const response = await fetch(url);\n    const data = await response.json();\n    this.setState({ loading: false, nurse: data });\n  }\n\n  //handle data update\n  firstnameHandleChange(event) {\n    this.setState({\n      nurse: { ...this.state.nurse, firstname: event.target.value },\n    });\n  }\n  lastnameHandleChange(event) {\n    this.setState({\n      nurse: { ...this.state.nurse, lastname: event.target.value },\n    });\n  }\n  passwordHandleChange(event) {\n    this.setState({\n      nurse: { ...this.state.nurse, password: event.target.value },\n    });\n  }\n  departmentHandleChange(event) {\n    this.setState({\n      nurse: { ...this.state.nurse, department: event.target.value },\n    });\n  }\n  //handle submit updated data\n  async handleOnSubmit(event) {\n    const sharedNurseId = this.context.nurseSharedId;\n    const url = `http://localhost:8080/nurse/${sharedNurseId}`;\n    const postUpdate = {\n      method: \"PUT\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(this.state.nurse),\n    };\n    fetch(url, postUpdate).then((response) => response.json());\n  }\n\n  render() {\n    return (\n        <>\n      <div className=\"NurseProfile-page\">\n          {this.state.loading || !this.state.nurse ? (\n            <div>Loading...</div>\n          ) : (\n            <Grid container spacing={2}>\n              <Grid item xs={12} sm={12} md={6} lg={6}>\n                <TextField\n                  type=\"text\"\n                  name=\"nurseId\"\n                  label=\"Nurse ID\"\n                  variant=\"outlined\"\n                  value={this.context.nurseSharedId}\n                  disabled={true}\n                />\n              </Grid>\n              <Grid item xs={12} sm={12} md={6} lg={6}>\n                <TextField\n                  type=\"text\"\n                  name=\"firstName\"\n                  label=\"First Name\"\n                  variant=\"outlined\"\n                  value={this.state.nurse.firstname}\n                  onChange={this.firstnameHandleChange}\n                />\n              </Grid>\n              <Grid item xs={12} sm={12} md={6} lg={6}>\n                <TextField\n                  type=\"text\"\n                  name=\"lastName\"\n                  label=\"Last Name\"\n                  variant=\"outlined\"\n                  value={this.state.nurse.lastname}\n                  onChange={this.lastnameHandleChange}\n                />\n              </Grid>\n              <Grid item xs={12} sm={12} md={6} lg={6}>\n                <TextField\n                  type=\"text\"\n                  name=\"department\"\n                  label=\"Department\"\n                  variant=\"outlined\"\n                  value={this.state.nurse.department}\n                  onChange={this.departmentHandleChange}\n                />\n              </Grid>\n              <Grid item xs={12} sm={12} md={6} lg={6}>\n                <TextField\n                  type=\"text\"\n                  name=\"password\"\n                  label=\"password\"\n                  variant=\"outlined\"\n                  value={this.state.nurse.password}\n                  onChange={this.passwordHandleChange}\n                />\n              </Grid>\n              <Grid item xs={12} sm={12} md={12} lg={12}>\n                <Button variant=\"contained\" color=\"primary\" onClick={this.handleOnSubmit}>\n                  Save Changes\n                </Button>\n              </Grid>\n              </Grid>\n          )}\n\n      </div>\n      </>\n    );\n  }\n}\n","import React from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport Button from \"@material-ui/core/Button\";\nimport { NurseContext } from \"../PersonalPage/NurseContext\";\nimport { Grid, InputBase } from \"@material-ui/core\";\nimport SearchIcon from \"@material-ui/icons/Search\";\n\nclass testPage extends React.Component {\n  static contextType = NurseContext;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchValue: \"\",\n    };\n    this.handleOnChange = this.handleOnChange.bind(this);\n    this.searchTestByPatient = this.searchTestByPatient.bind(this);\n    this.createTest = this.createTest.bind(this);\n    this.showAllTest = this.showAllTest.bind(this);\n  }\n\n  componentDidMount() {\n    this.context.setNurseContext(\"searchValue\", \"\");\n  }\n\n  handleOnChange(event) {\n    this.setState({ searchValue: event.target.value });\n  }\n\n  createTest() {\n    this.props.history.push(`${this.props.match.url}/test/createnewtest`);\n  }\n  searchTestByPatient(event) {\n    var code = event.keyCode || event.which;\n    if (code === 13) {\n      this.props.history.push(\"/test/alltests\");\n      this.context.setNurseContext(\"searchMethod\", \"patientId\");\n      this.context.setNurseContext(\"searchValue\", this.state.searchValue);\n    }\n  }\n\n  showAllTest() {\n    console.log(this.props.match)\n    // this.props.history.push(`${this.props.match.url}/test/alltests`);\n    this.context.setNurseContext(\"searchMethod\", \"all\");\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"NurseProfile-page\">\n          <Grid container spacing={3}>\n            <Grid item xs={12} sm={12} md={6} lg={6}>\n              <SearchIcon />\n              <InputBase\n                variant=\"outlined\"\n                placeholder=\"Search by Patient Id\"\n                name=\"searchByPatientId\"\n                onChange={this.handleOnChange}\n                onKeyPress={this.searchTestByPatient}\n              />\n            </Grid>\n            <Grid item xs={12} sm={12} md={6} lg={6}>\n              <Button variant=\"contained\" onClick={this.createTest}>\n                Create New Test\n              </Button>\n            </Grid>\n            <Grid item xs={12} sm={12} md={6} lg={6}>\n              <Button variant=\"contained\" onClick={this.showAllTest}>\n                Find All Tests By Nurse\n              </Button>\n            </Grid>\n          </Grid>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default withRouter(testPage);\n","import React from \"react\";\nimport {\n    TableCell,\n  } from \"@material-ui/core\";\n\n  import {\n    withStyles,\n  } from \"@material-ui/core/styles\";\n\n  const StyledTableCell = withStyles((theme) => ({\n    head: {\n      backgroundColor: theme.palette.customizeTable.main,\n      color: theme.palette.common.white,\n      fontSize: 20,\n    },\n    body: {\n      fontSize: 20,\n    },\n  }))(TableCell);\n  \n  export default StyledTableCell;","import React from \"react\";\nimport {\n  TableRow,\n} from \"@material-ui/core\";\n\nimport { withStyles } from \"@material-ui/core/styles\";\n\nconst StyledTableRow = withStyles((theme) => ({\n    root: {\n      \"&:nth-of-type(odd)\": {\n        backgroundColor: theme.palette.action.hover,\n      },\n    },\n  }))(TableRow);\n  \nexport default StyledTableRow;\n","  import {\n    makeStyles,\n    createMuiTheme,\n  } from \"@material-ui/core/styles\";\n\n  export const UseStyles = makeStyles((theme) => ({\n    root: {\n    //   display: 'flex',\n    //   flexWrap: 'wrap',\n      '& > *': {\n        marginTop: theme.spacing(5),\n        marginRight: 'auto',\n        marginLeft: 'auto',\n        width: theme.spacing(130),\n        // maxHeight: '1%',\n      },\n    },\n    button:{\n      marginTop: theme.spacing(5),\n      marginRight: 'auto',\n      marginLeft: 'auto',\n      width: theme.spacing(30),\n    }\n  }));\n\n  export const TableTheme = createMuiTheme({\n    palette: {\n      customizeTable: {\n        main: \"#5c6ac4\",\n      },\n    },\n  });\n\n  export const TestPageHeight=makeStyles((theme) => ({\n    root: {\n      '& > *': {\n        marginTop: theme.spacing(5),\n        marginRight: 'auto',\n        marginLeft: 'auto',\n        height: theme.spacing(60),\n      },\n    },\n  }));","import React, { useState, useEffect, useContext } from \"react\";\nimport { Link, withRouter,useRouteMatch } from \"react-router-dom\";\nimport { NurseContext } from \"../PersonalPage/NurseContext\";\nimport {\n  Table,\n  TableHead,\n  TableRow,\n  TableBody,\n  TableContainer,\n  Paper,\n  Button\n} from \"@material-ui/core\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\n\nimport StyledTableCell from \"../TableContent/StyledTableCell\";\nimport StyledTableRow from \"../TableContent/StyledTableRow\";\nimport { UseStyles, TableTheme } from \"../AppCss\";\n\nconst PatientListPage = ({ history }) => {\n  const [patientList, setPatientList] = useState([]);\n  const nurseContext = useContext(NurseContext);\n  //   set Css\n  const useStyles = UseStyles();\n  const tableTheme = TableTheme;\n  let {url}=useRouteMatch();\n\n  useEffect(() => {\n    const id = nurseContext.nurseSharedId;\n    fetchData(id);\n    // nurseContext.setNurseContext(\"searchValue\",\"\");\n  }, []);\n\n  async function fetchData(id) {\n    const listUrl = `http://localhost:8080/nurse/${id}/patients`;\n    const response = await fetch(listUrl);\n    const data = await response.json();\n    await setPatientList(data);\n  }\n\n  const method = (patient) => {\n    nurseContext.setNurseContext(\"patient\", patient);\n  };\n\n  const createNewPatient = () => {\n    history.push(`${url}/patient/createnewpatient`);\n  };\n\n  const deleteItem = (deleteUrl, id) => {\n    return fetch(deleteUrl, {\n      method: \"DELETE\",\n    }).then((response) => {\n      response.ok && fetchData(id);\n    });\n  };\n\n  const searchTestsByPatientId = (id) => {\n    console.log(id);\n    console.log(nurseContext);\n    nurseContext.setNurseContext(\"searchMethod\", \"patientId\");\n    nurseContext.setNurseContext(\"searchValue\", id);\n    console.log(nurseContext);\n  };\n\n  return (\n    <>\n      <ThemeProvider theme={tableTheme}>\n        <div className={useStyles.root}>\n          <TableContainer component={Paper} elevation={5}>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <StyledTableCell>Patient Id</StyledTableCell>\n                  <StyledTableCell>First Name</StyledTableCell>\n                  <StyledTableCell>Last Name</StyledTableCell>\n                  <StyledTableCell>Department</StyledTableCell>\n                  <StyledTableCell>Responsible By Nurse</StyledTableCell>\n                  <StyledTableCell>Room</StyledTableCell>\n                  <StyledTableCell>Tests</StyledTableCell>\n                  <StyledTableCell>Edit/Delete</StyledTableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {patientList.length > 0 &&patientList.map((item, index) => {\n                  return (\n                    <StyledTableRow key={index} scope=\"row\">\n                      <StyledTableCell>{item.patientId}</StyledTableCell>\n                      <StyledTableCell>{item.firstName}</StyledTableCell>\n                      <StyledTableCell>{item.lastName}</StyledTableCell>\n                      <StyledTableCell>{item.department}</StyledTableCell>\n                      <StyledTableCell>{item.nurseId}</StyledTableCell>\n                      <StyledTableCell>{item.room}</StyledTableCell>\n                      <StyledTableCell>\n                        <Link\n                          to=\"/test/alltests\"\n                          onClick={() => searchTestsByPatientId(item.patientId)}\n                        >\n                          Find Tests\n                        </Link>{\" \"}\n                        |\n                      </StyledTableCell>\n                      <StyledTableCell>\n                        <Button\n                          to={`/patient/${item.patientId}`}\n                          onClick={() => method(item)}\n                          color=\"primary\"\n                        >\n                          Edit\n                        </Button>{\" \"}\n                        |\n                        <Button\n                          onClick={() =>\n                            deleteItem(\n                              `http://localhost:8080/patients/paitent_${item.patientId}`,\n                              item.nurseId\n                            )\n                          }\n                          color=\"secondary\"\n                        >Delete</Button>\n                      </StyledTableCell>\n                    </StyledTableRow>\n                  );\n                })}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </div>\n      </ThemeProvider>\n      <div className={useStyles.button}>\n      <Button onClick={createNewPatient} color=\"primary\">Add New Patient</Button>\n      </div>\n    </>\n  );\n};\nexport default withRouter(PatientListPage);\n","import React from \"react\";\nimport {\n  InputLabel,\n  TextField,\n  Grid,\n  FormControl,\n  Select,\n  MenuItem,\n  Button,\n} from \"@material-ui/core\";\nimport { NurseContext } from \"../PersonalPage/NurseContext\";\nimport { withRouter } from \"react-router-dom\";\n\nclass testDetails extends React.Component {\n  static contextType = NurseContext;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      test: {\n        testId: \"\",\n        nurseId: \"\",\n        patientId: \"\",\n        testItemId: \"\",\n        testResult: \"\",\n        date: \"\",\n      },\n      backupTest:{\n        testId: \"\",\n        nurseId: \"\",\n        patientId: \"\",\n        testItemId: \"\",\n        testResult: \"\",\n        date: \"\",\n      },\n      loading:true,\n      testItemloading:true,\n      testItems: [],\n      nurseIdError: false,\n      patientIdError: false,\n      dateError: false,\n      testItemIdError: false,\n      testResultError: false,\n      patientList: [],\n      patientLoading:true\n    };\n    this.submitForm = this.submitForm.bind(this);\n    this.nurseIdEventHandler = this.nurseIdEventHandler.bind(this);\n    this.patientIdEventHandler = this.patientIdEventHandler.bind(this);\n    this.dateEventHandler = this.dateEventHandler.bind(this);\n    this.cancel = this.cancel.bind(this);\n    this.testItemIdEventHandler = this.testItemIdEventHandler.bind(this);\n    this.testResultEventHandler = this.testResultEventHandler.bind(this);\n  }\n  //Get testInfor and testItem options and patient options\n  async componentDidMount() {\n    let testId = this.context.test.testId;\n    const url = `http://localhost:8080/tests/testId_${testId}`;\n    const response = await fetch(url);\n    const data = await response.json();\n    if(response.ok){\n    this.setState({ test: data,backupTest:data,loading:false });}\n\n    const testItemUrl = \"http://localhost:8080/TestItem/AllTestItems\";\n    const testItemResponse = await fetch(testItemUrl);\n    const testItemData = await testItemResponse.json();\n    if(testItemResponse.ok){\n    this.setState({ testItems: testItemData, testItemloading: false });}\n\n    const patientUrl = `http://localhost:8080/nurse/${this.context.nurseSharedId}/patients`;\n    const patientResponse = await fetch(patientUrl);\n    const patientData = await patientResponse.json();\n    if(patientResponse.ok){\n    this.setState({ patientList: patientData, patientLoading: false });}\n  }\n  //handle data\n  nurseIdEventHandler(e) {\n    this.setState({\n      test: { ...this.state.test, nurseId: e.target.value },\n      nurseIdError: false,\n    });\n  }\n  patientIdEventHandler(e) {\n    this.setState({\n      test: { ...this.state.test, patientId: e.target.value },\n      patientIdError: false,\n    });\n  }\n  dateEventHandler(e) {\n    this.setState({\n      test: { ...this.state.test, date: e.target.value },\n      dateError: false,\n    });\n  }\n  testItemIdEventHandler(e) {\n    this.setState({\n      test: { ...this.state.test, testItemId: e.target.value },\n      testItemIdError: false,\n    });\n  }\n\n  testResultEventHandler(e) {\n    this.setState({\n      test: { ...this.state.test, testResult: e.target.value },\n      testResultError: false,\n    });\n  }\n  //handle button function\n  submitForm() {\n    let testId = this.context.test.testId;\n    if (\n      this.state.test.nurseId !== \"\" &&\n      this.state.test.patientId !== \"\" &&\n      this.state.test.date !== \"\" &&\n      this.state.test.testItemId !== \"\" &&\n      this.state.test.testResult !== \"\"\n    ) {\n      const url = `http://localhost:8080//tests/testId_${testId}`;\n      fetch(url, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(this.state.test),\n      }).then((response) => {\n        if(response.ok){\n        this.context.setNurseContext(\"searchMethod\", \"patientId\");\n        this.context.setNurseContext(\"searchValue\", this.state.test.patientId);\n        this.props.history.push(`${this.props.match.url}/test/alltests`);}\n      });\n    } else {\n      this.state.test.nurseId === \"\" && this.setState({ nurseIdError: true });\n      this.state.test.patientId === \"\" &&\n        this.setState({ patientIdError: true });\n      this.state.test.date === \"\" && this.setState({ dateError: true });\n      this.state.test.testItemId === \"\" &&\n        this.setState({ testItemIdError: true });\n      this.state.test.testResult === \"\" &&\n        this.setState({ testResultError: true });\n    }\n  }\n  cancel() {\n    this.setState({\n      test: this.state.backupTest\n    });\n  }\n\n  render() {\n\n    return (\n      <>\n        <div className=\"testPage-page\">\n          {this.state.loading ||this.state.testItemloading||this.state.patientLoading ||this.state.testItems.length === 0 ? (\n            <div>loading...</div>\n          ) : (\n            <>\n              <Grid container spacing={3}>\n                <Grid item xs={12} sm={12} md={6} lg={6}>\n                  <TextField\n                    name=\"nurseId\"\n                    label=\"Test is done by Nurse Id\"\n                    variant=\"outlined\"\n                    value={this.state.test.nurseId}\n                    onChange={this.nurseIdEventHandler}\n                    type=\"text\"\n                    error={this.state.nurseIdError}\n                  />\n                </Grid>\n\n                <Grid item xs={12} sm={12} md={6} lg={6}>\n                  <FormControl variant=\"outlined\" className=\"createTest-select\">\n                    <InputLabel>Patient Id</InputLabel>\n                    <Select\n                      error={this.state.patientIdError}\n                      id=\"patientId\"\n                      value={this.state.test.patientId}\n                      label=\"Patient Id\"\n                      onChange={this.patientIdEventHandler}\n                    >\n                      {this.state.patientList.length > 0 ? (\n                        this.state.patientList.map((item, index) => {\n                          return (\n                            <MenuItem key={index} value={item.patientId}>\n                              {`${item.patientId} ${item.firstName} ${item.lastName}`}\n                            </MenuItem>\n                          );\n                        })\n                      ) : (\n                        <MenuItem value={\"\"}>None</MenuItem>\n                      )}\n                    </Select>\n                  </FormControl>\n                </Grid>\n                <Grid item xs={12} sm={12} md={6} lg={6}>\n                  <FormControl variant=\"outlined\" className=\"createTest-select\">\n                    <InputLabel>Test Item</InputLabel>\n                    <Select\n                      error={this.state.testItemIdError}\n                      id=\"testItemId\"\n                      value={this.state.test.testItemId}\n                      label=\"Test Item\"\n                      onChange={this.testItemIdEventHandler}\n                    >\n                      {this.state.testItems.map((item, index) => {\n                        console.log(\"this.state.testItemId\",this.state.testItemId)\n                        console.log(\"loadITemId\",item.itemId)\n                        return (\n                          <MenuItem key={index} value={item.itemId}>\n                            {item.itemName}\n                          </MenuItem>\n                        );\n                      })}\n                    </Select>\n                  </FormControl>\n                </Grid>\n                <Grid item xs={12} sm={12} md={6} lg={6}>\n                  <TextField\n                    error={this.state.testResultError}\n                    type=\"text\"\n                    name=\"testResult\"\n                    variant=\"outlined\"\n                    label=\"Test Result\"\n                    value={this.state.test.testResult}\n                    onChange={this.testResultEventHandler}\n                  />\n                </Grid>\n                <Grid item xs={12} sm={12} md={6} lg={6}>\n                  <TextField\n                    error={this.state.dateError}\n                    type=\"date\"\n                    name=\"date\"\n                    variant=\"outlined\"\n                    value={this.state.test.date.split(\"T\",1)}\n                    onChange={this.dateEventHandler}\n                  />\n                </Grid>\n              </Grid>\n              <Grid container spacing={3}>\n                <Grid item xs={12} sm={12} md={6} lg={6}>\n                  <Button color=\"primary\" onClick={this.submitForm}>\n                    Save\n                  </Button>\n                </Grid>\n                <Grid item xs={12} sm={12} md={6} lg={6}>\n                  <Button color=\"secondary\" onClick={this.cancel}>\n                    Cancel\n                  </Button>\n                </Grid>\n              </Grid>\n            </>\n          )}\n        </div>\n      </>\n    );\n  }\n}\nexport default withRouter(testDetails);\n","import React from \"react\";\nimport {\n  Select,\n  MenuItem,\n  InputLabel,\n  FormControl,\n  TextField,\n  Grid,\n  Button,\n} from \"@material-ui/core\";\nimport { NurseContext } from \"../PersonalPage/NurseContext\";\nimport { withRouter } from \"react-router-dom\";\n\nclass CreateNewTest extends React.Component {\n  static contextType = NurseContext;\n  constructor(props) {\n    super(props);\n    this.state = {\n      test: {\n        nurseId: \"\",\n        patientId: \"\",\n        date: \"\",\n        testItemId: \"\",\n        testResult: \"\",\n      },\n      testItems: [],\n      loading: true,\n      patientList: [],\n      patientLoading: true,\n      nurseIdError: false,\n      patientIdError: false,\n      dateError: false,\n      testItemIdError: false,\n      testResultError: false,\n    };\n    this.submitForm = this.submitForm.bind(this);\n    this.nurseIdEventHandler = this.nurseIdEventHandler.bind(this);\n    this.patientIdEventHandler = this.patientIdEventHandler.bind(this);\n    this.dateEventHandler = this.dateEventHandler.bind(this);\n    this.cancel = this.cancel.bind(this);\n    this.testItemIdEventHandler = this.testItemIdEventHandler.bind(this);\n    this.testResultEventHandler = this.testResultEventHandler.bind(this);\n  }\n\n  //Get Test Item Options and the Patients of current Nurse\n  async componentDidMount() {\n    const url = \"http://localhost:8080/TestItem/AllTestItems\";\n    const response = await fetch(url);\n    const data = await response.json();\n    this.setState({ testItems: data, loading: false });\n\n    const patientUrl = `http://localhost:8080/nurse/${this.context.nurseSharedId}/patients`;\n    const patientResponse = await fetch(patientUrl);\n    const patientData = await patientResponse.json();\n    this.setState({ patientList: patientData, patientLoading: false });\n\n    this.context.setNurseContext(\"searchMethod\", \"\");\n    this.context.setNurseContext(\"searchValue\", \"\");\n  }\n\n  //Handle button function\n  submitForm() {\n      //check if all the fields are provided\n    if (\n      this.state.test.nurseId !== \"\" &&\n      this.state.test.patientId !== \"\" &&\n      this.state.test.date !== \"\" &&\n      this.state.test.testItemId !== \"\" &&\n      this.state.test.testResult !== \"\"\n    ) {\n      const url = \"http://localhost:8080/newTest\";\n      fetch(url, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(this.state.test),\n      }).then((response) => {\n          debugger\n        if (response.ok) {\n          //if response.ok then set the search Method\n          if (this.state.test.nurseId !== this.context.nurseSharedId) {\n            this.context.setNurseContext(\"searchMethod\", \"patientId\");\n            this.context.setNurseContext(\n              \"searchValue\",\n              this.state.test.patientId\n            );\n          } else {\n            this.context.setNurseContext(\"searchMethod\", \"all\");\n          } //End searchMethod set\n          this.props.history.push(`${this.props.match.url}/test/alltests`);\n        }\n      });//End data fetch\n    } \n    else {\n      this.state.test.nurseId === \"\" && this.setState({ nurseIdError: true });\n      this.state.test.patientId === \"\" &&\n        this.setState({ patientIdError: true });\n      this.state.test.date === \"\" && this.setState({ dateError: true });\n      this.state.test.testItemId === \"\" &&\n        this.setState({ testItemIdError: true });\n      this.state.test.testResult === \"\" &&\n        this.setState({ testResultError: true });\n    }\n  }\n  cancel() {\n    this.setState({\n      test: {\n        nurseId: \"\",\n        patientId: \"\",\n        date: \"\",\n        testItemId: \"\",\n        testResult: \"\",\n      },\n      nurseIdError: true,\n      patientIdError: true,\n      dateError: true,\n      testItemIdError: true,\n      testResultError: true,\n    });\n  }\n\n  //Handle Data onChange\n  nurseIdEventHandler(e) {\n    this.setState({\n      test: { ...this.state.test, nurseId: e.target.value },\n      nurseIdError: false,\n    });\n  }\n  patientIdEventHandler(e) {\n    this.setState({\n      test: { ...this.state.test, patientId: e.target.value },\n      patientIdError: false,\n    });\n  }\n  dateEventHandler(e) {\n    this.setState({\n      test: { ...this.state.test, date: e.target.value },\n      dateError: false,\n    });\n  }\n  testItemIdEventHandler(e) {\n    this.setState({\n      test: { ...this.state.test, testItemId: e.target.value },\n      testItemIdError: false,\n    });\n  }\n\n  testResultEventHandler(e) {\n    this.setState({\n      test: { ...this.state.test, testResult: e.target.value },\n      testResultError: false,\n    });\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"testPage-page\">\n          {this.state.loading || this.state.testItems.length === 0 ? (\n            <div>loading...</div>\n          ) : (\n            <>\n              <Grid container spacing={3}>\n                <Grid item xs={12} sm={12} md={6} lg={6}>\n                  <TextField\n                    name=\"nurseId\"\n                    label=\"Test is done by Nurse Id\"\n                    variant=\"outlined\"\n                    value={this.state.test.nurseId}\n                    onChange={this.nurseIdEventHandler}\n                    type=\"text\"\n                    error={this.state.nurseIdError}\n                  />\n                </Grid>\n\n                <Grid item xs={12} sm={12} md={6} lg={6}>\n                  <FormControl variant=\"outlined\" className=\"createTest-select\">\n                    <InputLabel>Patient Id</InputLabel>\n                    <Select\n                      error={this.state.patientIdError}\n                      id=\"patientId\"\n                      value={this.state.test.patientId}\n                      label=\"Patient Id\"\n                      onChange={this.patientIdEventHandler}\n                    >\n                      {this.state.patientList.length > 0 ? (\n                        this.state.patientList.map((item, index) => {\n                          return (\n                            <MenuItem key={index} value={item.patientId}>\n                              {`${item.patientId} ${item.firstName} ${item.lastName}`}\n                            </MenuItem>\n                          );\n                        })\n                      ) : (\n                        <MenuItem value={\"\"}>None</MenuItem>\n                      )}\n                    </Select>\n                  </FormControl>\n                </Grid>\n                <Grid item xs={12} sm={12} md={6} lg={6}>\n                  <FormControl variant=\"outlined\" className=\"createTest-select\">\n                    <InputLabel>Test Item</InputLabel>\n                    <Select\n                      error={this.state.testItemIdError}\n                      value={this.state.testItemId}\n                      label=\"Test Item\"\n                      onChange={this.testItemIdEventHandler}\n                    >\n                      {this.state.testItems.map((item, index) => {\n                        return (\n                          <MenuItem key={index} value={item.itemId}>\n                            {item.itemName}\n                          </MenuItem>\n                        );\n                      })}\n                    </Select>\n                  </FormControl>\n                </Grid>\n                <Grid item xs={12} sm={12} md={6} lg={6}>\n                  <TextField\n                    error={this.state.testResultError}\n                    type=\"text\"\n                    name=\"testResult\"\n                    variant=\"outlined\"\n                    label=\"Test Result\"\n                    value={this.state.test.testResult}\n                    onChange={this.testResultEventHandler}\n                  />\n                </Grid>\n                <Grid item xs={12} sm={12} md={6} lg={6}>\n                  <TextField\n                    error={this.state.dateError}\n                    type=\"date\"\n                    name=\"date\"\n                    variant=\"outlined\"\n                    value={this.state.test.date}\n                    onChange={this.dateEventHandler}\n                  />\n                </Grid>\n              </Grid>\n              <Grid container spacing={3}>\n                <Grid item xs={12} sm={12} md={6} lg={6}>\n                  <Button onClick={this.submitForm} color=\"primary\">\n                    Submit\n                  </Button>\n                </Grid>\n                <Grid item xs={12} sm={12} md={6} lg={6}>\n                  <Button onClick={this.cancel} color=\"secondary\">\n                    Cancel\n                  </Button>\n                </Grid>\n              </Grid>\n            </>\n          )}\n        </div>\n      </>\n    );\n  }\n}\n\nexport default withRouter(CreateNewTest);\n","import React, { useState, useEffect, useContext } from \"react\";\nimport { Link, useRouteMatch } from \"react-router-dom\";\nimport { NurseContext } from \"../PersonalPage/NurseContext\";\nimport {\n  Table,\n  TableHead,\n  TableRow,\n  TableBody,\n  TableContainer,\n  Paper,\n  TextField\n} from \"@material-ui/core\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\n\nimport StyledTableCell from \"../TableContent/StyledTableCell\";\nimport StyledTableRow from \"../TableContent/StyledTableRow\";\nimport { UseStyles, TableTheme } from \"../AppCss\";\n\nexport default function TestListPage() {\n  const [tests, setTests] = useState([]);\n  const [effectDependency, setDependency] = useState(false);\n  const sharedNurseContext = useContext(NurseContext);\n  let {url}=useRouteMatch();\n  //   set Css\n  const useStyles = UseStyles();\n  const tableTheme = TableTheme;\n  const [listOwner,setLisOwner]=useState(\"\");\n\n  useEffect(() => {\n    console.log(\"test Type\",sharedNurseContext.searchMethod)\n    let nurseId = sharedNurseContext.nurseSharedId;\n    let sharedSearchMethod = sharedNurseContext.searchMethod;\n    function getTests() {\n      let listUrl = \"\";\n      if (sharedSearchMethod === \"patientId\") {\n        let patientId = sharedNurseContext.searchValue;\n        listUrl = `http://localhost:8080/tests/patientId_${patientId}`;\n        setLisOwner(`Patient ID ${patientId} has below tests`);\n      } else {\n        listUrl = `http://localhost:8080/tests/nurseId_${nurseId}`;\n        setLisOwner(`Nurse ID ${nurseId} has done below tests`);\n      }\n      fetch(listUrl)\n        .then((response) => response.json())\n        .then((data) => setTests(data));\n      setDependency(false);\n    }\n    getTests();\n    console.log(sharedNurseContext.searchValue);\n  }, [effectDependency]);\n\n  const deleteItem = (url) => {\n    return fetch(url, {\n      method: \"DELETE\",\n    }).then((response) => {\n      response.ok && setDependency(true);\n    });\n  };\n\n  const updateContext = (item) => {\n    sharedNurseContext.setNurseContext(\"test\", item);\n  };\n\n  return (\n    <>\n      <ThemeProvider theme={tableTheme}>\n        <div className={useStyles.root}>\n          <TextField lable={listOwner}/>\n          <TableContainer component={Paper} elevation={5}>\n            <Table aria-label=\"test table\">\n              <TableHead>\n                <TableRow>\n                  <StyledTableCell>Test Id</StyledTableCell>\n                  <StyledTableCell>Operated by Nurse Id</StyledTableCell>\n                  <StyledTableCell>Test Items</StyledTableCell>\n                  <StyledTableCell>Test Results</StyledTableCell>\n                  <StyledTableCell>Test Date</StyledTableCell>\n                  <StyledTableCell>Edit/Delete</StyledTableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {tests.length > 0 &&\n                  tests.map((item, index) => {\n                    return (\n                      <StyledTableRow key={index} scope=\"row\">\n                        <StyledTableCell>{item.testId}</StyledTableCell>\n                        <StyledTableCell>{item.nurseId}</StyledTableCell>\n                        <StyledTableCell>{item.testItemId}</StyledTableCell>\n                        <StyledTableCell>{item.testResult}</StyledTableCell>\n                        <StyledTableCell>{item.date.split(\"T\",1)}</StyledTableCell>\n                        <StyledTableCell>\n                          <Link\n                            to={`${url}/test/testdetails`}\n                            onClick={() => updateContext(item)}\n                          >\n                            Edit\n                          </Link>\n                          <input\n                            type=\"button\"\n                            onClick={() =>\n                              deleteItem(\n                                `http://localhost:8080/tests/testId_${item.testId}`\n                              )\n                            }\n                            value=\"Delete\"\n                          />\n                        </StyledTableCell>\n                      </StyledTableRow>\n                    );\n                  })}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </div>\n      </ThemeProvider>\n    </>\n  );\n}\n","import React from \"react\";\nimport { NurseContext } from \"../PersonalPage/NurseContext\";\nimport { TextField, Grid, Button } from \"@material-ui/core\";\nimport {withRouter} from 'react-router-dom';\n\nclass createNewPatient extends React.Component {\n  static contextType = NurseContext;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      patient: {\n        firstName: \"\",\n        lastName: \"\",\n        room: \"\",\n        nurseId: \"\",\n        department:\"\"\n      },\n    };\n    this.firstNameEventHandler = this.firstNameEventHandler.bind(this);\n    this.lastNameEventHandler = this.lastNameEventHandler.bind(this);\n    this.roomEventHandler = this.roomEventHandler.bind(this);\n    this.departmentEventHandler=this.departmentEventHandler.bind(this);\n    // this.nurseIdEventHandler=this.nurseIdEventHandler.bind(this);\n    this.submitForm = this.submitForm.bind(this);\n  }\n  componentDidMount() {\n    this.setState({\n      patient: { ...this.state.patient, nurseId: this.context.nurseSharedId },\n    });\n  }\n  firstNameEventHandler(event) {\n    this.setState({\n      patient: { ...this.state.patient, firstName: event.target.value },\n    });\n  }\n  lastNameEventHandler(event) {\n    this.setState({\n      patient: { ...this.state.patient, lastName: event.target.value },\n    });\n  }\n  roomEventHandler(event) {\n    this.setState({\n      patient: { ...this.state.patient, room: event.target.value },\n    });\n  }\n  departmentEventHandler(event) {\n    this.setState({\n      patient: { ...this.state.patient, department: event.target.value },\n    });\n  }\n  // nurseIdEventHandler(event){\n  //     this.setState({patient:{...this.state.patient,nurseId:event.target.value}});\n  // }\n\n  submitForm(event) {\n    const url = `http://localhost:8080/nurse/${this.context.nurseSharedId}/newPatient`;\n    fetch(url, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(this.state.patient),\n    }).then((response) => \n    {if(response.ok){\n        this.props.history.push(`${this.props.match.path}/patient`);\n    }});\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"NurseProfile-page\">\n          <Grid container spacing={3}>\n            <Grid item xs={12} sm={12} md={6} lg={6}>\n              <TextField\n                name=\"firstName\"\n                variant=\"outlined\"\n                label=\"First Name\"\n                value={this.state.patient.firstName}\n                onChange={this.firstNameEventHandler}\n              />\n            </Grid>\n            <Grid item xs={12} sm={12} md={6} lg={6}>\n              <TextField\n                name=\"lastName\"\n                variant=\"outlined\"\n                label=\"Last Name\"\n                value={this.state.patient.lastName}\n                onChange={this.lastNameEventHandler}\n              />\n            </Grid>\n            <Grid item xs={12} sm={12} md={6} lg={6}>\n              <TextField\n                name=\"room\"\n                variant=\"outlined\"\n                label=\"Room\"\n                value={this.state.patient.room}\n                onChange={this.roomEventHandler}\n              />\n            </Grid>\n            <Grid item xs={12} sm={12} md={6} lg={6}>\n              <TextField\n                name=\"nurseId\"\n                variant=\"outlined\"\n                label=\"Nurse ID\"\n                value={this.state.patient.nurseId}\n                disabled={true}\n              />\n            </Grid>\n            <Grid item xs={12} sm={12} md={6} lg={6}>\n              <TextField\n                name=\"department\"\n                variant=\"outlined\"\n                label=\"Department\"\n                value={this.state.patient.department}\n                disabled={false}\n              />\n            </Grid>\n            <Grid item xs={12} sm={12} md={12} lg={12}>\n              <Button onClick={this.submitForm}>Submit</Button>\n            </Grid>\n          </Grid>\n        </div>\n      </>\n    );\n  }\n}\nexport default withRouter(createNewPatient);\n","import React, { useState, useEffect, useContext }from 'react'\nimport {NurseContext} from '../PersonalPage/NurseContext'\nimport{useRouteMatch, useHistory} from 'react-router-dom'\nimport Button from '@material-ui/core/Button';\n\nexport default function Details(){\n\n// let { id } = useParams();\nlet {url}=useRouteMatch();\nlet history =useHistory();\nconst nurseContext=useContext(NurseContext);\nconst sharedPatient=nurseContext.patient;\nconst [patient,setPatient]= useState({\n    firstName:sharedPatient.firstName,\n    lastName:sharedPatient.lastName,\n    department:sharedPatient.department,\n    room:sharedPatient.room,\n    nurseId:sharedPatient.nurseId\n}); \n// const [newPatient,setNewPatient]=useState(sharedPatient);\n\nfunction firstNameOnChange(e){\n    setPatient({...patient,firstName:e.target.value});\n}\nfunction lastNameOnChange(e){\n    setPatient({...patient,lastName:e.target.value});\n}\nfunction departmentOnChange(e){\n    setPatient({...patient,department:e.target.value});\n}\nfunction roomOnChange(e){\n    setPatient({...patient,room:e.target.value});\n}\nfunction nurseIdOnChange(e){\n    setPatient({...patient,nurseId:e.target.value});\n}\n\nasync function updatePatient(){\n    const patientId=sharedPatient.patientId;\n    const patientUrl=`http://localhost:8080/patients/patient_${patientId}`;\n    const postUpdate={\n        method:\"PUT\",\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(patient),\n    }\n    fetch(patientUrl,postUpdate).then(response=>\n        {if(response.ok){\n            history.push(`${url}/patient`);\n        }});\n}\n\n\n\n// useEffect(()=>{\n\n//     async function fetchData(){\n//     const patientId=nurseContext.patient;\n//     console.log(patientId);\n//     console.log(id);\n//     const url=`http://localhost:8080/patient/${patientId}`;\n//     const response=await fetch(url);\n//     const data=await response.json();\n//     setPatient(data);\n//     }\n//     fetchData();\n    \n// },[]);\n\nreturn(\n    <>\n    <label>First Name</label>\n    <input value={patient.firstName} onChange={firstNameOnChange}/>\n    <label>Last Name</label>\n    <input value={patient.lastName} onChange={lastNameOnChange}/>\n    <label>Department</label>\n    <input value={patient.department} onChange={departmentOnChange}/>\n    <label>Room</label>\n    <input value={patient.room} onChange={roomOnChange}/>\n    <label>Nurse ID</label>\n    <input value={patient.nurseId} onChange={nurseIdOnChange}/>\n    <Button onClick={updatePatient}variant=\"contained\">Submit</Button>\n    </>\n)\n}\n\n\n","import React, { useContext, useState } from \"react\";\nimport { NurseContext } from \"../PersonalPage/NurseContext\";\nimport { useHistory } from \"react-router-dom\";\nimport { Typography, Button } from \"@material-ui/core\";\n\nexport default function Logout(props) {\n  let history = useHistory();\n  const sharedContext = useContext(NurseContext);\n\n  function onclick() {\n    sharedContext.setNurseContext(\"nurseSharedId\",\"\")\n    history.push(props.to);\n\n  }\n  return (\n    <>\n      <span className={props.buttonClass}>\n        <Button onClick={onclick}>\n          <Typography variant=\"h6\" className={props.typoClass}>\n            {props.name}\n          </Typography>\n        </Button>\n      </span>\n    </>\n  );\n}\n","import React from \"react\";\nimport { TextField, Grid, Button } from \"@material-ui/core\";\nimport { NurseContext } from \"../PersonalPage/NurseContext\";\nimport { withRouter } from \"react-router-dom\";\n\nclass Register extends React.Component {\n  static contextType = NurseContext;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      nurse: {\n        firstname: \"\",\n        lastname: \"\",\n        department: \"\",\n        password: \"\",\n      },\n    };\n    this.firstnameHandleChange = this.firstnameHandleChange.bind(this);\n    this.lastnameHandleChange = this.lastnameHandleChange.bind(this);\n    this.passwordHandleChange = this.passwordHandleChange.bind(this);\n    this.departmentHandleChange = this.departmentHandleChange.bind(this);\n    this.handleOnSubmit = this.handleOnSubmit.bind(this);\n  }\n\n  //handle data update\n  firstnameHandleChange(event) {\n    this.setState({\n      nurse: { ...this.state.nurse, firstname: event.target.value },\n    });\n  }\n  lastnameHandleChange(event) {\n    this.setState({\n      nurse: { ...this.state.nurse, lastname: event.target.value },\n    });\n  }\n  passwordHandleChange(event) {\n    this.setState({\n      nurse: { ...this.state.nurse, password: event.target.value },\n    });\n  }\n  departmentHandleChange(event) {\n    this.setState({\n      nurse: { ...this.state.nurse, department: event.target.value },\n    });\n  }\n  //handle submit data\n  async handleOnSubmit(event) {\n    const url = `http://localhost:8080/register`;\n    const postSubmit = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(this.state.nurse),\n    };\n    fetch(url, postSubmit)\n      .then((response) => response.json())\n      .then((data) =>{\n        this.context.setNurseContext(\"nurseSharedId\", data.nurseId);\n        this.props.history.push(`${this.props.match.url}/nurseprofile`);}\n      );\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"NurseProfile-page\">\n          <Grid container spacing={2}>\n            <Grid item xs={12} sm={12} md={6} lg={6}>\n              <TextField\n                type=\"text\"\n                name=\"firstName\"\n                label=\"First Name\"\n                variant=\"outlined\"\n                value={this.state.nurse.firstname}\n                onChange={this.firstnameHandleChange}\n              />\n            </Grid>\n            <Grid item xs={12} sm={12} md={6} lg={6}>\n              <TextField\n                type=\"text\"\n                name=\"lastName\"\n                label=\"Last Name\"\n                variant=\"outlined\"\n                value={this.state.nurse.lastname}\n                onChange={this.lastnameHandleChange}\n              />\n            </Grid>\n            <Grid item xs={12} sm={12} md={6} lg={6}>\n              <TextField\n                type=\"text\"\n                name=\"department\"\n                label=\"Department\"\n                variant=\"outlined\"\n                value={this.state.nurse.department}\n                onChange={this.departmentHandleChange}\n              />\n            </Grid>\n            <Grid item xs={12} sm={12} md={6} lg={6}>\n              <TextField\n                type=\"text\"\n                name=\"password\"\n                label=\"password\"\n                variant=\"outlined\"\n                value={this.state.nurse.password}\n                onChange={this.passwordHandleChange}\n              />\n            </Grid>\n            <Grid item xs={12} sm={12} md={12} lg={12}>\n              <Button variant=\"contained\" onClick={this.handleOnSubmit}>\n                Save Changes\n              </Button>\n            </Grid>\n          </Grid>\n        </div>\n      </>\n    );\n  }\n}\nexport default withRouter(Register);\n","import React, { Component } from \"react\";\n// import logo from './logo.svg';\nimport \"./App.css\";\nimport NavigationBar from \"./NavigationBar/NavigationBar\";\nimport { Switch, Route,withRouter } from \"react-router-dom\";\nimport Login from \"./Login/Login\";\nimport ProjectDescription from \"./WebDescription/ProjectNavigation\";\nimport { NurseContext } from \"./PersonalPage/NurseContext\";\n// import PersonalPage from \"./PersonalPage/PersonalPage\";\nimport { AppBar, Typography, Box, Toolbar, Grid } from \"@material-ui/core\";\nimport Profile from \"./PersonalPage/NurseProfile\";\n\nimport TestPage from \"./TestManagement/TestPage\";\nimport PatientListPage from \"./PatientManagement/PatientListPage\";\nimport TestDetails from \"./TestManagement/TestDetails\";\nimport CreateNewTest from \"./TestManagement/CreateNewTest\";\nimport TestListPage from \"./TestManagement/TestListPage\";\nimport CreateNewPatient from \"./PatientManagement/CreateNewPatient\";\nimport PatientDetails from \"./PatientManagement/PatientDetails\";\nimport Logout from \"./Logout/Logout\";\nimport Register from './Register/Register';\nconst navHeader = [\n  {\n    name: \"Home Page\",\n    to: \"/\",\n    typoClass: \"App-NavHeader-typo\",\n    buttonClass: \"HomePage-Button\",\n  },\n  {\n    name: \"Login\",\n    to: \"/login\",\n    typoClass: \"App-NavHeader-typo\",\n    buttonClass: \"\",\n  },\n  {\n    name: \"Register\",\n    to: \"/register\",\n    typoClass: \"App-NavHeader-typo\",\n    buttonClass: \"\",\n  },\n];\nconst routerMapping = [\n  {\n    name: \"Profile\",\n    to: \"nurseProfile\",\n    typoClass: \"App-NavHeader-typo\",\n  },\n  { name: \"Tests\", to: \"/test\", typoClass: \"App-NavHeader-typo\" },\n  {\n    name: \"Patients\",\n    to: \"patient\",\n    typoClass: \"App-NavHeader-typo\",\n  },\n];\nconst logoutRouterMapping = {\n  name: \"Logout\",\n  to: \"\",\n  typoClass: \"App-NavHeader-typo\",\n};\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      nurseSharedId: \"\",\n      patient: {},\n      test: {},\n      setNurseContext: (key, value) => {\n        this.setState({ [key]: value });\n      },\n    };\n  }\n\n  //Before Login AppBar items\n  setAppBarBeforeLogin = () => {\n\n    return navHeader.map((item, index) => (\n      <NavigationBar\n        key={index}\n        name={item.name}\n        click={`${item.to}`}\n        // click={item.to}\n        buttonClass={item.buttonClass}\n        typoClass={item.typoClass}\n      />\n    ));\n  };\n\n  //after Login AppBar items\n  setAppBarAfterLogin = () => {\n    return routerMapping.map((item, index) => {\n      return (\n        <Grid key={index} container item xs={12} sm={6} lg={3} md={3}>\n          <NavigationBar\n            key={index}\n            name={item.name}\n            click={`${item.to}`}\n            typoClass={item.typoClass}\n          />\n        </Grid>\n      );\n    });\n  };\n\n  //switch AppBar by Login and Logout\n  setAppBar = (value) => {\n    let item = logoutRouterMapping;\n    const url=this.props.match.url;\n    if (value.nurseSharedId === \"\") {\n      return this.setAppBarBeforeLogin();\n    } else {\n      return (\n        <>\n          {this.setAppBarAfterLogin()}\n          <Logout name={item.name} to={`${item.to}`} typoClass={item.typoClass} />\n        </>\n      );\n    }\n  };\n\n  //footer\n  copyright = () => {\n    return (\n      <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n        {\"Copyright © \"}\n        TingLi Website{\" \"}\n        {new Date().getFullYear()}\n        {\".\"}\n      </Typography>\n    );\n  };\n\n  //profileBody\n  profilePage = () => (\n    <Grid container spacing={3} style={{paddingLeft:\"10%\"}}>\n      <Grid item xs={12} sm={12} md={12} lg={12}>\n        <Profile />\n      </Grid>\n    </Grid>\n  );\n\n  render() {\n    const path=this.props.match.path;\n\n    return (\n      <>\n        <header className=\"header-css\">\n          <div className=\"header-css\"></div>Nurse Patient Tests Management System</header>\n        <NurseContext.Provider value={this.state}>\n          <body className=\"App-body\">\n              <AppBar position=\"static\">\n                <Toolbar>\n                  <NurseContext.Consumer>\n                    {(value) => {\n                      return this.setAppBar(value);\n                    }}\n                  </NurseContext.Consumer>\n                </Toolbar>\n              </AppBar>\n              <Switch>\n                <Route exact path={`${path}`}>\n                  <ProjectDescription />\n                </Route>\n                <Route exact path={`${path}login`}>\n                  <Login />\n                </Route>\n                <Route exact path={`${path}register`}>\n                  <Register />\n                </Route>\n                <Route exact path={`${path}test`}>\n                  <TestPage />\n                </Route>\n                <Route exact path={`${path}nurseprofile`}>\n                  {this.profilePage()}\n                </Route>\n                <Route exact path={`${path}patient`}>\n                  <PatientListPage />\n                </Route>\n                <Route exact path={`${path}test/testdetails`}>\n                  <TestDetails />\n                </Route>\n                <Route exact path={`${path}test/createnewtest`}>\n                  <CreateNewTest />\n                </Route>\n                {/* <Route exact path=\"/test/testlistpage\">\n                  <TestListPage />\n                </Route> */}\n                <Route exact path={`${path}test/alltests`}>\n                  <TestListPage />\n                </Route>\n                <Route exact path={`${path}patient/createnewpatient`}>\n                  <CreateNewPatient />\n                </Route>\n                <Route path={`${path}patient/:id`}>\n                  <PatientDetails />\n                </Route>\n              </Switch>\n          </body>\n        </NurseContext.Provider>\n        <footer>\n          <Box mt={8}>{this.copyright()}</Box>\n        </footer>\n      </>\n    );\n  }\n}\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router} from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n  <Router>\n    <App/>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}